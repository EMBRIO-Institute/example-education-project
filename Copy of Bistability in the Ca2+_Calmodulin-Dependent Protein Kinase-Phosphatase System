{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Bistability in the Ca2+/Calmodulin-Dependent Protein Kinase-Phosphatase System","provenance":[{"file_id":"1DsQ2EfevSHuWnQ_RdU0oMKewbEhTYtjJ","timestamp":1606943111143},{"file_id":"1Gw3L2byDVj7uARGfHQDO1RR7od3b5lAc","timestamp":1605095837360},{"file_id":"1gbZffy8FqRXWnhqB1sLrnvnhiEffGHJH","timestamp":1603965167879},{"file_id":"1KOm58s8VyG5F88fTgmhlnqjUVKZxupeI","timestamp":1585602638054},{"file_id":"1gSBMvQ8jj2oyBqhn2AA8ZI7lqToXD45k","timestamp":1585339987435},{"file_id":"1ZeHRni5aYR3EQyX5OMUG7UuI-44KR36Y","timestamp":1585323528099},{"file_id":"1i597K9VkmcRZHxS0iAUHpI5Ix7yHVh5J","timestamp":1583861241031}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"_29tyy0OjM2g"},"source":["# Bistability in the Ca2+/Calmodulin-Dependent Protein Kinase-Phosphatase System\n","\n","## Author: You Zhou for BME 695\n","## Editor: David M. Umulis\n","## Date: 2020.11.11\n"]},{"cell_type":"markdown","metadata":{"id":"JPvROwSvX81f"},"source":["##Introduction\n","Long-term potentiation (LTP) is the most studied experimental model of memory ([1][2][3]). Because LTP related memories often consist of bistable elements, it is natural to ask whether some of the biophysical and biochemical systems, which participate in LTP, can operate as bistable switches. Although a crucial role of CaMKII autophosphorylation in induction of LTP is widely accepted, its participation in maintenance of LTP remains controversial ([4][5][6][7]).\n","\\\n","\\\n","In this paper, a mathematical model (ODE system) of autophosphorylation of CaMKII is developed in the presence of a phosphatase to verify whether two stable steady states of CaMKII autophosphorylation can be found over a wide range of concentrations of the intracellular calcium. \n","\\\n","\\\n","The results show that the CaMKII-phosphatase bistability may play an important role in long-term synaptic modifications. They also suggest a plausible explanation for the very high concentrations of CaMKII found in postsynaptic densities (PSD) of cerebral neurons.\n"]},{"cell_type":"markdown","metadata":{"id":"PZvuul2dmevb"},"source":["##Schematic of the first two steps of autophosphorylation of CaMKII holoenzyme\n","This paper uses a model with asymmetric interaction of the neighbor subunits as\n","proposed by Hanson and Schulman (1992)[8]. Their model is a ring along which autophosphorylation propagates in one direction.\n","\n","For this section, we will focus on the following example of a holoenzyme with six subunits and learn the schematic of the first two steps of autophosphorylation of CaMKII holoenzyme which is the initial step ($P_0 \\rightarrow P_1$) and the second step ($P_1 \\rightarrow P_2$).\n","\n","![picture](https://drive.google.com/uc?export=view&id=1omhnc08E4NeiY7hxHXLrPYpdnqMT_lyP)\n","\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Cfs0Wcu5PWv5"},"source":["#### Left Column \n","The left column presents initiation of autophosphorylation. After two neighbor subunits bind $(Ca^{2+})_{4}CaM$, the first subunit phosphorylates the second one in the clockwise direction.\n","- $C$ designates the $Ca^{2+}$/calmodulin complex\n","- $P$ is orthophosphate.\n","- $P_0$ is the unphosphorylated holoenzyme.\n","- $P_1$ is the 1-fold phosphorylated holoenzyme.\n","- \"$\\leftrightarrow$\" means reversible reaction.\n","\\begin{equation*}\n","4Ca^{2+} + CaM \\leftrightarrow C\n","\\\\\n","P_0 + C \\leftrightarrow P_{0}C\n","\\\\\n","P_{0}C + C \\leftrightarrow P_{0}C_{2}\n","\\\\\n","P_{0}C_{2} \\rightarrow P_{1}C_{2}\\space \\text{(Eq.1)}\n","\\end{equation*}\n","\n","We use empirical Hill equation to describe the $(Ca^{2+})_{4}CaM$ activation of subunits.\n","\n","- $F$ is the fraction of subunits bound to $(Ca^{2+})_{4}CaM$.\n","- $K_{H1} = [Ca^{2+}]_{50}$ is the calcium Hill constant of CaMKII.\n","\n","\\begin{equation*}\n","F = \\frac{([Ca^{2+}]/K_{H1})^4}{1+([Ca^{2+}]/K_{H1})^4}\n","\\end{equation*}\n","\n","####Assumption\n","\n","1. The probability of $(Ca^{2+})_{4}CaM$ binding to two neighbor subunits is low when $[Ca^{2+}]$ is significantlly less than $K_{H1}$.\n","\n","#### The rate of the initiation step\n","- $k_1$ is the rate constant of (Eq.1).\n","- 10 is the statistical factor.\n","\\begin{equation*}\n","\\nu_1 = \\frac{10k_1([Ca^{2+}]/K_{H1})^8P_0}{(1+([Ca^{2+}]/K_{H1})^4)^2}\n","\\end{equation*}"]},{"cell_type":"markdown","metadata":{"id":"NQqkoJtTXLil"},"source":["## Middle and Right Column\n","\n","The middle and right columns in the figure present two routes of propagation\n","of autophosphorylation. Since Autonomous activity of the CaMKII is usually\n","60â€“80% of the $(Ca^{2+})/CaM$-dependent activity (Hanson and Schulman,\n","1992)[8], the paper assumes that catalytic activity of the autophosphorylated subunit does not depend on binding of $(Ca^{2+})_{4}CaM$ which means the author neglects differences between the middle and right columns.\n","\n","The rate of propagation of autophosphorylation depends only on the following reactions:\n","\n","\\begin{equation*}\n","P_1 + C \\leftrightarrow P_1C\n","\\\\\n","P_1C \\rightarrow P_2 \\space (Eq.2)\n","\\end{equation*}\n","\n","Similarly, the rate of the second autophosphorylation step is:\n","\n","\\begin{equation*}\n","V_2 = \\frac{k_1([Ca^{2+}]/K_{H1})^8P_1}{(1+([Ca^{2+}]/K_{H1})^4)^2}\n","\\end{equation*}\n","\n","Here $k_1$ is the rate constant of (Eq.2), which is the same as of (Eq.1)."]},{"cell_type":"markdown","metadata":{"id":"4834hb3aX7fB"},"source":["## Understand the relationship between autophosphorylation and dephosphorylation\n","\n","If there is no dephosphorylation, the subsequent steps of propagation\n","of autophosphorylation are identical to the first one. Because there is\n","always ***only one*** unphosphorylated subunit that is adjacent to the phosphorylated neighbor in the clockwise direction.\n","![picture](https://drive.google.com/uc?export=view&id=1Uma4fdnVM7oN3mvgQQnterN8rpVDN_sl)\n","\n","However, protein phosphatases dephosphorylate subunits at random.\n","As a result, there is a random distribution of phosphorylated and unphosphorylated subunits in the holoenzyme.\n","![picture](https://drive.google.com/uc?export=view&id=1TAqyeYgKUCfrFTmts0UdgfuiMhanJIku)\n","\n","\n","#### Definition of an autophosphorylating pair\n","\n","  The unphosphorylated subunit in the pair is adjacent to the phosphorylated neighbor in the clockwise direction.\n","\n","  ![picture](https://drive.google.com/uc?export=view&id=136Bcac4GvvWwPF2ReKcc5JFb00uEsRUX)\n","\n","  We can find that there are 2 autophosphorylating pairs in $P_2$ and there is only 1 autophosphorylating pair in $P_2^\\prime$. \n","  \n","  This means that $P_2$ has twice the chance of autophosphorylation compared to $P_2^\\prime$.\n","\n","![picture](https://drive.google.com/uc?export=view&id=1corq5pQoMyfsgSTT30OshmP8a6biUXOa)\n","\n","We can also find if we reverse the state of all units, the number of autophosphorylating pairs remains unchanged. Which is:\n","\n","\\begin{equation*}\n","w_i = w_{N-i}\n","\\end{equation*}\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"6hcJqwgMgwfd"},"source":["#### Task 1: Calculate the effective number of autophosphorylating pairs of 10 subunits model\n","\n","- Assumption\n","\n","  All distinguishable configurations of subunits in the holoenzyme with a given number of phosphorylated subunits exist ***with equal probabilities***.\n","\n","We can calculate the effective number of autophosphorylating pairs using the following equation:\n","\n","\\begin{equation*}\n","w_i = w_{10-i} = \\frac{\\sum_1^ijm_j}{\\sum_1^im_j}\n","\\end{equation*}\n","\n","$m_j$ is number of distinguishable configurations with j autophosphorylating pairs.\n","\n","Values of $w_i$ are: $w_1 = w_9 = 1.0$, $w_2 = w_8 = 1.8$, $w_3 = w_7 = 2.3$, $w_4 = w_6 = 2.7$, $w_5 = 2.8$."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uOlCXv7za9zw","executionInfo":{"status":"ok","timestamp":1606632867037,"user_tz":-480,"elapsed":1121,"user":{"displayName":"You Zhou","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj6F0Sz-Q-Xm5D3ogN67YRO3Tn7ZbLUoMF5ZKmT=s64","userId":"06987722824977437445"}},"outputId":"b0b1970d-f386-4fc3-d07e-dc7f709555f5"},"source":["'''\n","Calculate A(length, n) and n <= length (not used!)\n","'''\n","def getNumber(length, n):\n","  result = 0\n","  if n == 1:\n","    result = length\n","  else:\n","    result = length * getNumber(length - 1, n - 1)\n","  return result\n","'''\n","Judge whether element is included in list\n","'''\n","def contain(list, element):\n","  for i in list:\n","    if i == element:\n","      return True\n","  return False\n","\n","result_list = [] # size of this list: C(total, n)\n","'''\n","List all the combination of C(total, n)\n","'''\n","def comb(total_list, start_total, start_comb, n, comb_list):\n","  global result_list\n","  for i in range(start_total, len(total_list) - (n-1)):\n","    comb_list[start_comb] = total_list[i]\n","    if n == 1:\n","      copy = [] # need to do the deep copy, can't append(comb_list) directly\n","      for c in comb_list:\n","        copy.append(c)\n","      result_list.append(copy)\n","    else:\n","      comb(total_list, i+1, start_comb+1, n-1, comb_list)\n","'''\n","Count all the autophosphorylating pairs\n","'''\n","def calPair(total_list):\n","  count = 0\n","  for l in result_list:\n","    for i in range(0, len(total_list) - 1):\n","      if contain(l, total_list[i]) and not contain(l, total_list[i+1]):\n","        count = count + 1\n","    if contain(l, total_list[-1]) and not contain(l, total_list[0]): # the subunit model is a ring\n","        count = count + 1\n","  return count\n","\n","w = []\n","for n in range(1,10):\n","  total_list = [0,1,2,3,4,5,6,7,8,9]\n","  start_total = 0\n","  start_comb = 0\n","  comb_list = []\n","  result_list = []\n","  for i in range(n):\n","    comb_list.append(0)\n","  comb(total_list, start_total, start_comb, n, comb_list)\n","  total_count = calPair(total_list)\n","  total_comb = len(result_list)\n","  #print(total_count)\n","  #print(total_comb)\n","  print('W',n, '=', round(total_count/total_comb,5))\n","  w.append(round(total_count/total_comb,1))\n","print(w)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["W 1 = 1.0\n","W 2 = 1.77778\n","W 3 = 2.33333\n","W 4 = 2.66667\n","W 5 = 2.77778\n","W 6 = 2.66667\n","W 7 = 2.33333\n","W 8 = 1.77778\n","W 9 = 1.0\n","[1.0, 1.8, 2.3, 2.7, 2.8, 2.7, 2.3, 1.8, 1.0]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_JazRiYuvMnp"},"source":["## Rate of autophosphorylation and dephosphorylation of holoenzymes\n","\n","Rate of autophosphorylation of holoenzymes with $i$ phosphorylated subunits is:\n","\n","\\begin{equation*}\n","V_i = \\nu_2w_iP_i\n","\\end{equation*}\n","\n","where\n","\n","\\begin{equation*}\n","\\nu_2 = \\frac{k_1([Ca^{2+}]/K_{H1})^4}{1+([Ca^{2+}]/K_{H1})^4}\n","\\end{equation*}\n","\n","is the per-site rate of propgation of autophosphorylation.\n","\n","Dephosphorylation of subunits proceeds according to the Michaelis-\n","Menten scheme:\n","\n","\\begin{equation*}\n","SP + E \\leftrightarrow SPE \\rightarrow E + S\n","\\end{equation*}\n","\n","Here $S$ is an unphosphorylated subunit and $SP$ is a phosphorylated one. \n","\n","Accordingly, the rate of dephosphorylation of holoenzymes with $i$ phosphorylated subunits is:\n","\n","\\begin{equation*}\n","V_{-i} = \\nu_3iP_i\n","\\end{equation*}\n","\n","where \n","\n","\\begin{equation*}\n","\\nu_3 = \\frac{k_2e_p}{K_M + \\sum_1^{10}iP_i}\n","\\end{equation*}\n","\n","is the per-subunit rate of dephosphorylation, $e_p$ is the concentration of the\n","active protein phosphatase, and $k_2$ and $K_M$ are the catalytic and the Michaelis constants, respectively."]},{"cell_type":"markdown","metadata":{"id":"X5OYE8ajoeD3"},"source":["## Protein that phosphatases dephosphorylate CaMKII-P\n","\n","There are four protein phosphatases dephosphorylate CaMKII-P: PP1, PP2A,\n","PP2C (Strack et al., 1997)[9], and a specific CaMKII phosphatase (Ishida et\n","al., 1998)[10]. According to Strack et al. (1997)[9], activity of PP1 is 20% and PP2A is 60% of the total phosphatase activity in cytosol and correspondingly, 50% and 8% in PSD. PP1 is the only protein phosphatase that dephosphorylates CaMKII in PSD according to Strack et al. (1997)[9].\n","\n","Activity of PP1 can be controlled by $Ca^{2+}/CaM$ via inhibitor I, calcineurin\n","(CaN), and cAMP-dependent protein kinase (PKA) (Mulkey et al., 1994)[11]. PKA phosphorylates inhibitor 1 (I1) and calcineurin dephosphorylates it. The Hill\n","number for $Ca^{2+}$ activation of CaN is 3 (Stemmer and Klee, 1994)[12].\n","Phosphorylated inhibitor-1 (I1P) deactivates PP1 with $K_I = 1nM$ (Endo et\n","al., 1996)[13]. The corresponding scheme is:\n","\n","\\begin{equation*}\n","I1 + PKA \\leftrightarrow I1\\cdot PKA \\rightarrow I1P\n","\\\\\n","3Ca^{2+} + CaM \\leftrightarrow C_3\n","\\\\\n","CaN + C_3 \\leftrightarrow CaN\\cdot C3\n","\\\\\n","I1P + CaN\\cdot C3 \\leftrightarrow I1P\\cdot CaN\\cdot C3 \\rightarrow I1\n","\\\\\n","SP + PP1 \\leftrightarrow SP\\cdot PP1 \\rightarrow PP1 + S\n","\\\\\n","PP1 + I1P \\leftrightarrow PP1\\cdot I1P\n","\\\\\n","SP\\cdot PP1 + I1P \\leftrightarrow SP\\cdot PP1\\cdot I1P\n","\\end{equation*}\n","\n","The paper assumes that the concentration of free I1 is constant and much less than $K_M$ of PKA, and the concentration of free I1P is much less than $K_M$ of CaN.\n","- $k_3$ and $k_4$ are the association and dissociation rate constants\n","of the $PP1\\cdot I1P$ complex.\n","- $\\nu_{CaN} = V_{CaN}/K_{M2}$, $V_{CaN}$ is the activity, and $K_{M2}$ is the Michaelis constant.\n","- $K_{H2}$ is the Hill constant of CaN.\n","- $\\nu_{PKA} = V_{PKA}/K_{M3}$, $V_{PKA}$ and $K_{M3}$ are the activity and the Michaelis constant of PKA.\n","\n","\\begin{equation*}\n","\\frac{de_p}{dt} = -k_3Ie_p + k_4(e_{p0} - e_p)\n","\\\\\n","\\frac{dI}{dt} = -k_3Ie_p + k_4(e_{p0} - e_p) + \\nu_{PKA}I_0 - \\frac{\\nu_{CaN}([Ca^{2+}]/K_{H2})^3I}{1+([Ca^{2+}]/K_{H2})^3}\n","\\end{equation*}"]},{"cell_type":"markdown","metadata":{"id":"igmHUe2vyWTX"},"source":["## ODE Model\n","\n","The complete model of autophosphorylation of CaMKII in the presence\n","of $Ca^{2+}$-dependent $PP1$ is:\n","\n","\\begin{equation*}\n","\\frac{dP_0}{dt} = -\\nu_1 + \\nu_3P_1\n","\\\\\n","\\frac{dP_1}{dt} = \\nu_1 - \\nu_3P_1 - \\nu_2P_1 + 2\\nu_3P_2\n","\\\\\n","\\frac{dP_2}{dt} = \\nu_2P_1 - 2\\nu_3P_2 - 1.8\\nu_2P_2 + 3\\nu_3P_3\n","\\\\\n","\\frac{dP_3}{dt} = 1.8\\nu_2P_2 - 3\\nu_3P_3 - 2.3\\nu_2P_3 + 4\\nu_3P_4\n","\\\\\n","\\frac{dP_4}{dt} = 2.3\\nu_2P_3 - 4\\nu_3P_4 - 2.7\\nu_2P_4 + 5\\nu_3P_5\n","\\\\\n","\\frac{dP_5}{dt} = 2.7\\nu_2P_4 - 5\\nu_3P_5 - 2.8\\nu_2P_5 + 6\\nu_3P_6\n","\\\\\n","\\frac{dP_6}{dt} = 2.8\\nu_2P_5 - 6\\nu_3P_6 - 2.7\\nu_2P_6 + 7\\nu_3P_7\n","\\\\\n","\\frac{dP_7}{dt} = 2.7\\nu_2P_6 - 7\\nu_3P_7 - 2.3\\nu_2P_7 + 8\\nu_3P_8\n","\\\\\n","\\frac{dP_8}{dt} = 2.3\\nu_2P_7 - 8\\nu_3P_8 - 1.8\\nu_2P_8 + 9\\nu_3P_9\n","\\\\\n","\\frac{dP_9}{dt} = 1.8\\nu_2P_8 - 9\\nu_3P_9 - \\nu_2P_9 + 10\\nu_3P_{10}\n","\\\\\n","\\frac{dP_{10}}{dt} = \\nu_2P_9 - 10\\nu_3P_{10}\n","\\\\\n","\\frac{de_p}{dt} = -k_3Ie_p + k_4(e_{p0} - e_p)\n","\\\\\n","\\frac{dI}{dt} = -k_3Ie_p + k_4(e_{p0} - e_p) + \\nu_{PKA}I_0 - \\frac{\\nu_{CaN}([Ca^{2+}]/K_{H2})^3I}{1+([Ca^{2+}]/K_{H2})^3}\n","\\end{equation*}"]},{"cell_type":"code","metadata":{"id":"RuRnyLcq27CV","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1606639390720,"user_tz":-480,"elapsed":8462,"user":{"displayName":"You Zhou","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj6F0Sz-Q-Xm5D3ogN67YRO3Tn7ZbLUoMF5ZKmT=s64","userId":"06987722824977437445"}},"outputId":"5593e824-e802-4431-a803-e069098ebf78"},"source":["import numpy as np # import data structuring\n","from scipy.integrate import odeint # import ODE integrating function\n","import matplotlib.pyplot as plt # import plotting libraries\n","\n","# parameter specification\n","ek = 20.0 # Total concentration of CaMKII: 0.1-30Î¼M\n","ep0 = 0.05 # Total concentration of protein phosphatase (PP1): 0.01-1.2Î¼M\n","I0 = 0.1 # Concentration of free inhibitor 1: 0.0, 0.1Î¼M\n","vCaN = 1.0 # Activity of calcineurin divided by its Michaelis constant: 1.0s-1 \n","vPKA = 1.0 # Activity of PKA divided by its Michaelis constant: 1.0s-1\n","KM = 0.4 # The Michaelis constant of protein phosphatase: 0.4-20Î¼M\n","KH1 = 1.8 # The Ca2+ activation Hill constant of CaMKII: 4.0Î¼M; Can't get the expected figure, 1.3-3.0Î¼M can get good results!\n","KH2 = 0.7 # The Ca2+ activation Hill constant of calcineurin: 0.3-1.4Î¼M\n","k1 = 0.5 # The catalytic constant of autophosphorylation: 0.5s-1\n","k2 = 2.0 # The catalytic constant of protein phosphatase: 2.0s-1\n","k3 = 1.0 # The association rate constant of the PP1.I1P complex: 1.0Î¼M-1s-1\n","k4 = 1.10**-3 # The dissociation rate constant of the PP1.I1P complex: 1.10^-3s-1\n","\n","# Create function to solve a set of ODEs.\n","def model(y, t):\n","  # labeling where in the model output y, you will track each species.\n","  P0 = y[0]\n","  P1 = y[1]\n","  P2 = y[2]\n","  P3 = y[3]\n","  P4 = y[4]\n","  P5 = y[5]\n","  P6 = y[6]\n","  P7 = y[7]\n","  P8 = y[8]\n","  P9 = y[9]\n","  P10 = y[10]\n","  ep = y[11]\n","  I = y[12]\n","  curCa = y[13]\n","\n","  sumiPi = 1*P1 + 2*P2 + 3*P3 + 4*P4 + 5*P5 + 6*P6 + 7*P7 + 8*P8 + 9*P9 + 10*P10 \n","\n","  v1 = (10*k1*P0*(curCa/KH1)**8)/((1+(curCa/KH1)**4)**2)\n","  v2 = k1*(curCa/KH1)**4/(1+(curCa/KH1)**4)\n","  v3 = k2*ep/(KM + sumiPi)\n","  dP0dt = -v1 + v3*P1\n","  dP1dt = v1 - v3*P1 - v2*P1 + 2*v3*P2\n","  dP2dt = v2*P1 - 2*v3*P2 - 1.8*v2*P2 + 3*v3*P3\n","  dP3dt = 1.8*v2*P2 - 3*v3*P3 - 2.3*v2*P3 + 4*v3*P4\n","  dP4dt = 2.3*v2*P3 - 4*v3*P4 - 2.7*v2*P4 + 5*v3*P5\n","  dP5dt = 2.7*v2*P4 - 5*v3*P5 - 2.8*v2*P5 + 6*v3*P6\n","  dP6dt = 2.8*v2*P5 - 6*v3*P6 - 2.7*v2*P6 + 7*v3*P7\n","  dP7dt = 2.7*v2*P6 - 7*v3*P7 - 2.3*v2*P7 + 8*v3*P8\n","  dP8dt = 2.3*v2*P7 - 8*v3*P8 - 1.8*v2*P8 + 9*v3*P9\n","  dP9dt = 1.8*v2*P8 - 9*v3*P9 - v2*P9 + 10*v3*P10\n","  dP10dt = v2*P9 - 10*v3*P10\n","  depdt = -k3*I*ep + k4*(ep0 - ep)\n","  dIdt = -k3*I*ep + k4*(ep0 - ep) + vPKA*I0 - vCaN*I*(curCa/KH2)**3/(1+(curCa/KH2)**3)\n","\n","  # Return a list of the increment values\n","  return [dP0dt, dP1dt, dP2dt, dP3dt, dP4dt, dP5dt, dP6dt, dP7dt, dP8dt, dP9dt, dP10dt, depdt, dIdt, 0]\n","\n","def plot_all(soln, t):\n","  # Figure 1: Plot all species concentration timeseries\n","  plt.figure(num = 1)\n","  plt.plot(t, soln[:, 0], label='P0')\n","  plt.plot(t, soln[:, 1], label='P1')\n","  plt.plot(t, soln[:, 2], label='P2')\n","  plt.plot(t, soln[:, 3], label='P3')\n","  plt.plot(t, soln[:, 4], label='P4')\n","  plt.plot(t, soln[:, 5], label='P5')\n","  plt.plot(t, soln[:, 6], label='P6')\n","  plt.plot(t, soln[:, 7], label='P7')\n","  plt.plot(t, soln[:, 8], label='P8')\n","  plt.plot(t, soln[:, 9], label='P9')\n","  plt.plot(t, soln[:, 10], label='P10')\n","  plt.plot(t, soln[:, 11], label='ep')\n","  plt.plot(t, soln[:, 12], label='I')\n","  plt.plot(t, soln[:, 13], label='Ca')\n","\n","  # Define plot attributes\n","  plt.xlabel('Time (s)')\n","  plt.ylabel('Species Concentration (Î¼M)')\n","  plt.title('System Timeseries')\n","  plt.legend(loc=1, bbox_to_anchor=(1.2, 1))\n","\n","def plot_Ca_CP(Ca, P):\n","  plt.figure(num = 2)\n","  plt.plot(Ca, P, label = 'Relation')\n","\n","  # Define plot attributes\n","  plt.xlabel('Concentration of Ca2+ (Î¼M)')\n","  plt.ylabel('Concentration of phosphorylated subunits (Î¼M)')\n","  plt.title('Bistability of the steady-state concentrations of phosphorylated subunits of CaMKII')\n","  plt.legend(loc=1, bbox_to_anchor=(1.2, 1))\n","\n","def plot_Ca_P0(Ca, P0):\n","  plt.figure(num = 3)\n","  plt.plot(Ca, P0, label = 'Relation')\n","\n","  # Define plot attributes\n","  plt.xlabel('Concentration of Ca2+ (Î¼M)')\n","  plt.ylabel('Concentration of CaMKII (Î¼M)')\n","  plt.title('Effects of parameters on size and position of the bistability domain')\n","  plt.legend(loc=1, bbox_to_anchor=(1.2, 1))\n","\n","Ca_Array = np.linspace(0, 1.0, 51) \n","CP_Array = []\n","\n","for i in range(len(Ca_Array)):\n","  Ca = Ca_Array[i] # static concentration of Ca2+: 0.0-1.0Î¼M \n","  # Create a list of all the initial conditions.\n","  y0 = [ek, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ep0, I0, Ca]\n","\n","  z = 500000 # Declare the number of timesteps\n","  t = np.linspace(0, 100000.0, z) # Create time array\n","\n","  # ODE Solution Script using odeint()\n","  # This function does the Euler integration that you coded on your own in previous classes and returns a solution\n","  soln = odeint(model, y0, t)\n","\n","  # Assigns variable names to solution matrix\n","  P0 = soln[:, 0]\n","  P1 = soln[:, 1]\n","  P2 = soln[:, 2]\n","  P3 = soln[:, 3]\n","  P4 = soln[:, 4]\n","  P5 = soln[:, 5]\n","  P6 = soln[:, 6]\n","  P7 = soln[:, 7]\n","  P8 = soln[:, 8]\n","  P9 = soln[:, 9]\n","  P10 = soln[:, 10]\n","  curCa = soln[:, 13]\n","  con_P = 1*P1 + 2*P2 + 3*P3 + 4*P4 + 5*P5 + 6*P6 + 7*P7 + 8*P8 + 9*P9 + 10*P10 \n","  CP_Array.append(con_P[-1])\n","  #print('Complete calculation for Ca = ', curCa[-1])\n","\n","plot_Ca_CP(Ca_Array, CP_Array)\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"hfVY2fLyyMrg","executionInfo":{"status":"ok","timestamp":1606639724160,"user_tz":-480,"elapsed":281014,"user":{"displayName":"You Zhou","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj6F0Sz-Q-Xm5D3ogN67YRO3Tn7ZbLUoMF5ZKmT=s64","userId":"06987722824977437445"}},"outputId":"6fbc6384-23ce-45eb-d027-b3b269c4af7f"},"source":["# This module may take 5 mins!\n","import numpy as np # import data structuring\n","from scipy.integrate import odeint # import ODE integrating function\n","import matplotlib.pyplot as plt # import plotting libraries\n","\n","# parameter specification\n","ek = 20.0 # Total concentration of CaMKII: 0.1-30Î¼M\n","ep0 = 0.05 # Total concentration of protein phosphatase (PP1): 0.01-1.2Î¼M\n","I0 = 0.1 # Concentration of free inhibitor 1: 0.0, 0.1Î¼M\n","vCaN = 1.0 # Activity of calcineurin divided by its Michaelis constant: 1.0s-1 \n","vPKA = 1.0 # Activity of PKA divided by its Michaelis constant: 1.0s-1\n","KM = 0.4 # The Michaelis constant of protein phosphatase: 0.4-20Î¼M\n","KH1 = 1.8 # The Ca2+ activation Hill constant of CaMKII: 4.0Î¼M; tested as 1.8\n","KH2 = 0.7 # The Ca2+ activation Hill constant of calcineurin: 0.3-1.4Î¼M\n","k1 = 0.5 # The catalytic constant of autophosphorylation: 0.5s-1\n","k2 = 2.0 # The catalytic constant of protein phosphatase: 2.0s-1\n","k3 = 1.0 # The association rate constant of the PP1.I1P complex: 1.0Î¼M-1s-1\n","k4 = 1.10**-3 # The dissociation rate constant of the PP1.I1P complex: 1.10^-3s-1\n","\n","# Create function to solve a set of ODEs.\n","def model(y, t):\n","  # labeling where in the model output y, you will track each species.\n","  P0 = y[0]\n","  P1 = y[1]\n","  P2 = y[2]\n","  P3 = y[3]\n","  P4 = y[4]\n","  P5 = y[5]\n","  P6 = y[6]\n","  P7 = y[7]\n","  P8 = y[8]\n","  P9 = y[9]\n","  P10 = y[10]\n","  ep = y[11]\n","  I = y[12]\n","  curCa = y[13]\n","\n","  sumiPi = 1*P1 + 2*P2 + 3*P3 + 4*P4 + 5*P5 + 6*P6 + 7*P7 + 8*P8 + 9*P9 + 10*P10 \n","\n","  v1 = (10*k1*P0*(curCa/KH1)**8)/((1+(curCa/KH1)**4)**2)\n","  v2 = k1*(curCa/KH1)**4/(1+(curCa/KH1)**4)\n","  v3 = k2*ep/(KM + sumiPi)\n","  dP0dt = -v1 + v3*P1\n","  dP1dt = v1 - v3*P1 - v2*P1 + 2*v3*P2\n","  dP2dt = v2*P1 - 2*v3*P2 - 1.8*v2*P2 + 3*v3*P3\n","  dP3dt = 1.8*v2*P2 - 3*v3*P3 - 2.3*v2*P3 + 4*v3*P4\n","  dP4dt = 2.3*v2*P3 - 4*v3*P4 - 2.7*v2*P4 + 5*v3*P5\n","  dP5dt = 2.7*v2*P4 - 5*v3*P5 - 2.8*v2*P5 + 6*v3*P6\n","  dP6dt = 2.8*v2*P5 - 6*v3*P6 - 2.7*v2*P6 + 7*v3*P7\n","  dP7dt = 2.7*v2*P6 - 7*v3*P7 - 2.3*v2*P7 + 8*v3*P8\n","  dP8dt = 2.3*v2*P7 - 8*v3*P8 - 1.8*v2*P8 + 9*v3*P9\n","  dP9dt = 1.8*v2*P8 - 9*v3*P9 - v2*P9 + 10*v3*P10\n","  dP10dt = v2*P9 - 10*v3*P10\n","  depdt = -k3*I*ep + k4*(ep0 - ep)\n","  dIdt = -k3*I*ep + k4*(ep0 - ep) + vPKA*I0 - vCaN*I*(curCa/KH2)**3/(1+(curCa/KH2)**3)\n","\n","  # Return a list of the increment values\n","  return [dP0dt, dP1dt, dP2dt, dP3dt, dP4dt, dP5dt, dP6dt, dP7dt, dP8dt, dP9dt, dP10dt, depdt, dIdt, 0]\n","\n","def plot_all(soln, t):\n","  # Figure 1: Plot all species concentration timeseries\n","  plt.figure(num = 1)\n","  plt.plot(t, soln[:, 0], label='P0')\n","  plt.plot(t, soln[:, 1], label='P1')\n","  plt.plot(t, soln[:, 2], label='P2')\n","  plt.plot(t, soln[:, 3], label='P3')\n","  plt.plot(t, soln[:, 4], label='P4')\n","  plt.plot(t, soln[:, 5], label='P5')\n","  plt.plot(t, soln[:, 6], label='P6')\n","  plt.plot(t, soln[:, 7], label='P7')\n","  plt.plot(t, soln[:, 8], label='P8')\n","  plt.plot(t, soln[:, 9], label='P9')\n","  plt.plot(t, soln[:, 10], label='P10')\n","  plt.plot(t, soln[:, 11], label='ep')\n","  plt.plot(t, soln[:, 12], label='I')\n","  plt.plot(t, soln[:, 13], label='Ca')\n","\n","  # Define plot attributes\n","  plt.xlabel('Time (s)')\n","  plt.ylabel('Species Concentration (Î¼M)')\n","  plt.title('System Timeseries')\n","  plt.legend(loc=1, bbox_to_anchor=(1.2, 1))\n","\n","Ca_Array = np.linspace(0, 1.0, 51) \n","init_y = [ek, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ep0, I0, 0]\n","j = 0\n","Ca_CP_Array = []\n","for m in range(201):\n","    if m > 0:\n","        if j < 10:\n","            if init_y[j] > 0:\n","                init_y[j] = init_y[j] - 1\n","                init_y[j + 1] = init_y[j + 1] + 1\n","            else:\n","                j = j + 1\n","                if init_y[j] > 0:\n","                    init_y[j] = init_y[j] - 1\n","                    init_y[j + 1] = init_y[j + 1] + 1\n","\n","    y0 = []\n","    for e in init_y:\n","        y0.append(e)\n","    CP_Array = []\n","    for i in range(len(Ca_Array)):\n","        Ca = Ca_Array[i] # static concentration of Ca2+: 0.0-1.0Î¼M \n","        # Create a list of all the initial conditions.\n","        y0[-1] = Ca\n","        # print(y0)\n","        z = 5000 # Declare the number of timesteps\n","        t = np.linspace(0, 1000.0, z) # Create time array\n","    \n","        # ODE Solution Script using odeint()\n","        # This function does the Euler integration that you coded on your own in previous classes and returns a solution\n","        soln = odeint(model, y0, t)\n","    \n","        # Assigns variable names to solution matrix\n","        P0 = soln[:, 0]\n","        P1 = soln[:, 1]\n","        P2 = soln[:, 2]\n","        P3 = soln[:, 3]\n","        P4 = soln[:, 4]\n","        P5 = soln[:, 5]\n","        P6 = soln[:, 6]\n","        P7 = soln[:, 7]\n","        P8 = soln[:, 8]\n","        P9 = soln[:, 9]\n","        P10 = soln[:, 10]\n","        curCa = soln[:, 13]\n","        con_P = 1*P1 + 2*P2 + 3*P3 + 4*P4 + 5*P5 + 6*P6 + 7*P7 + 8*P8 + 9*P9 + 10*P10 \n","        CP_Array.append(con_P[-1])\n","    \n","    Ca_CP_Array.append(CP_Array)\n","    \n","con_PU = np.linspace(0, 200, 201) \n","con_Ca = []\n","for m in range(201):\n","    CP = Ca_CP_Array[m]\n","    index = 0\n","    for i in range(len(CP) - 1):\n","        if CP[i] <= m and CP[i+1] >= m:\n","            index = i + 0.5\n","        if CP[i] >= m and CP[i+1] <= m:\n","            index = i + 0.5\n","    if index == 0:\n","        index = len(CP) \n","    con_Ca.append(1.0*index/len(CP))\n","\n","plt.figure(num = 1)\n","plt.plot(con_Ca, con_PU)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fb17d813668>]"]},"metadata":{"tags":[]},"execution_count":18},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"nsMg2iPn8rvx"},"source":["## Calcium Signaling\n","\n","The above model is an ODE model based on static $Ca^{2+}$ concentration. While in the time-dependent simulations, the paper uses $Ca^{2+}$ dynamics generated by a simple protocol for induction of LTP, which is a single tetanus with\n","frequencies of excitation varying from 5 to 100 Hz, and duration in the\n","range from 1 to 1800s.\n","\n","$Ca^{2+}$ response to a single depolarization pulse is modeled by an instant\n","elevation and the following exponential decay. The paper assumes a simple summation of $Ca^{2+}$ pulses during periodic excitation [14]:\n","\n","\\begin{equation*}\n","[Ca^{2+}] = [Ca^{2+}]_{rest} + A\\sum_1^nexp(-i/(f\\tau))\n","\\end{equation*}\n","\n","Here\n","\n","- $[Ca^{2+}]_{rest}$ is the resting concentration of $Ca^{2+}$.\n","- $A$ is the amplitude of a single $Ca^{2+}$ pulse.\n","- $f$ is the frequency of excitation.\n","- $\\tau$ is the relaxtion time of $Ca^{2+}$ decay.\n","- $n$ is the number of pulses in the tetanus.\n","\n","However, this is a discrete way to discribe the pulses and we need to consider the superposition of pulses from a continuous time perspective.\n","\n","\\begin{equation*}\n","\\Delta[Ca^{2+}]_i(t) = [Ca^{2+}]_i - [Ca^{2+}]_{rest}\n","\\\\ = A\\cdot e^{-t/\\tau},\\space t \\geq t_{ap}\n","\\\\ = 0,\\space t < t_{ap}\n","\\end{equation*}\n","\n","In this way, given a time $t$, we can calculate the superposition of pulses with different $t_{ap}$.\n","\n","\\begin{equation*}\n","t_{ap}^i = i/f, \\space 0\\leq i\\leq n\n","\\end{equation*}"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":531},"id":"lWMqokzeDRcw","executionInfo":{"status":"ok","timestamp":1606621182109,"user_tz":-480,"elapsed":1522,"user":{"displayName":"You Zhou","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj6F0Sz-Q-Xm5D3ogN67YRO3Tn7ZbLUoMF5ZKmT=s64","userId":"06987722824977437445"}},"outputId":"27269218-19a4-468f-ace9-f718f2facf2b"},"source":["import math\n","import matplotlib.pyplot as plt\n","\n","# parameter specification\n","f = 10 # frequency of excitation: 10Hz\n","max_time = 60 # total simulation time: 60s\n","tau = 0.2 # relaxtion time of  Ca2+  decay: 0.2s\n","A = 1 # amplitude of a single  Ca2+  pulse: 1Î¼m\n","c0 = 0.1 # resting concentration of  Ca2+: 0.1Î¼m\n","\n","def wave(A, tau, start, cur):\n","    if cur < start:\n","        result = 0\n","    else:\n","        result = A*math.exp(-(cur - start)/tau)\n","    return result\n","\n","total_number_wave = max_time * f\n","start_time = []\n","for i in range(total_number_wave + 1):\n","    dt = 1/f\n","    start_time.append(round(i*dt,1))\n","    \n","sample = []\n","for i in range(30):\n","    dt = 1/(f)\n","    sample.append(round(i*dt,1) - 0.0001)\n","    sample.append(round(i*dt,1) )\n","sample.insert(0, -1)\n","\n","totalC = []\n","for c in sample:\n","    if c < 0:\n","        totalC.append(c0)\n","        continue\n","    curC = c0\n","    for s in start_time:\n","        curC = curC + wave(A, tau, s, c)\n","    totalC.append(curC)\n","\n","plt.figure(num = 4)    \n","plt.plot(sample,totalC)\n","\n","sample_end = []\n","for i in range(30):\n","    dt = 1/(f)\n","    sample_end.append(round(i*dt,1) - 0.0001 + 58)\n","    sample_end.append(round(i*dt,1) + 58)\n","\n","totalC_end = []\n","for c in sample_end:\n","    curC_end = c0\n","    for s in start_time:\n","        curC_end = curC_end + wave(A, tau, s, c)\n","    totalC_end.append(curC_end)\n","    \n","plt.figure(num = 5)\n","plt.plot(sample_end,totalC_end)\n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fddb01be6a0>]"]},"metadata":{"tags":[]},"execution_count":3},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"mlpUdphRe-TU","executionInfo":{"status":"ok","timestamp":1606877317346,"user_tz":-480,"elapsed":13031,"user":{"displayName":"You Zhou","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj6F0Sz-Q-Xm5D3ogN67YRO3Tn7ZbLUoMF5ZKmT=s64","userId":"06987722824977437445"}},"outputId":"e6aae88d-0388-49f6-e764-d8b9ffbbc6c8"},"source":["import numpy as np # import data structuring\n","from scipy.integrate import odeint # import ODE integrating function\n","import matplotlib.pyplot as plt # import plotting libraries\n","import math\n","\n","# parameter specification\n","ek = 20.0 # Total concentration of CaMKII: 0.1-30Î¼M\n","ep0 = 0.3 # Total concentration of protein phosphatase (PP1): 0.01-1.2Î¼M\n","I0 = 0.1 # Concentration of free inhibitor 1: 0.0, 0.1Î¼M\n","vCaN = 1.0 # Activity of calcineurin divided by its Michaelis constant: 1.0s-1 \n","vPKA = 1.0 # Activity of PKA divided by its Michaelis constant: 1.0s-1\n","KM = 0.4 # The Michaelis constant of protein phosphatase: 0.4-20Î¼M\n","KH1 = 1.8 # The Ca2+ activation Hill constant of CaMKII: 4.0Î¼M; tested as 1.8\n","KH2 = 1.4 # The Ca2+ activation Hill constant of calcineurin: 0.3-1.4Î¼M\n","k1 = 0.5 # The catalytic constant of autophosphorylation: 0.5s-1\n","k2 = 2.0 # The catalytic constant of protein phosphatase: 2.0s-1\n","k3 = 1.0 # The association rate constant of the PP1.I1P complex: 1.0Î¼M-1s-1\n","k4 = 1.10**-3 # The dissociation rate constant of the PP1.I1P complex: 1.10^-3s-1\n","\n","# wave parameter specification\n","f = 10 # frequency of excitation: 10Hz\n","max_time = 60 # total simulation time: 60s\n","tau = 0.2 # relaxtion time of  Ca2+  decay: 0.2s\n","A = 1 # amplitude of a single  Ca2+  pulse: 1Î¼m\n","c0 = 0.1 # resting concentration of  Ca2+: 0.1Î¼m\n","\n","total_number_wave = max_time * f\n","start_time = []\n","for i in range(total_number_wave + 1):\n","    dt = 1/f\n","    start_time.append(round(i*dt,1))\n","\n","def wave(A, tau, start, cur):\n","    if cur < start:\n","        result = 0\n","    else:\n","        result = A*math.exp(-(cur - start)/tau)\n","    return result\n","\n","# Create function to solve a set of ODEs.\n","def model(y, t):\n","  # labeling where in the model output y, you will track each species.\n","  P0 = y[0]\n","  P1 = y[1]\n","  P2 = y[2]\n","  P3 = y[3]\n","  P4 = y[4]\n","  P5 = y[5]\n","  P6 = y[6]\n","  P7 = y[7]\n","  P8 = y[8]\n","  P9 = y[9]\n","  P10 = y[10]\n","  ep = y[11]\n","  I = y[12]\n","\n","  sumiPi = 1*P1 + 2*P2 + 3*P3 + 4*P4 + 5*P5 + 6*P6 + 7*P7 + 8*P8 + 9*P9 + 10*P10 \n","\n","  curCa = c0\n","  for s in start_time:\n","    curCa = curCa + wave(A, tau, s, t) \n","\n","  v1 = (10*k1*P0*(curCa/KH1)**8)/((1+(curCa/KH1)**4)**2)\n","  v2 = k1*(curCa/KH1)**4/(1+(curCa/KH1)**4)\n","  v3 = k2*ep/(KM + sumiPi)\n","  dP0dt = -v1 + v3*P1\n","  dP1dt = v1 - v3*P1 - v2*P1 + 2*v3*P2\n","  dP2dt = v2*P1 - 2*v3*P2 - 1.8*v2*P2 + 3*v3*P3\n","  dP3dt = 1.8*v2*P2 - 3*v3*P3 - 2.3*v2*P3 + 4*v3*P4\n","  dP4dt = 2.3*v2*P3 - 4*v3*P4 - 2.7*v2*P4 + 5*v3*P5\n","  dP5dt = 2.7*v2*P4 - 5*v3*P5 - 2.8*v2*P5 + 6*v3*P6\n","  dP6dt = 2.8*v2*P5 - 6*v3*P6 - 2.7*v2*P6 + 7*v3*P7\n","  dP7dt = 2.7*v2*P6 - 7*v3*P7 - 2.3*v2*P7 + 8*v3*P8\n","  dP8dt = 2.3*v2*P7 - 8*v3*P8 - 1.8*v2*P8 + 9*v3*P9\n","  dP9dt = 1.8*v2*P8 - 9*v3*P9 - v2*P9 + 10*v3*P10\n","  dP10dt = v2*P9 - 10*v3*P10\n","  depdt = -k3*I*ep + k4*(ep0 - ep)\n","  dIdt = -k3*I*ep + k4*(ep0 - ep) + vPKA*I0 - vCaN*I*(curCa/KH2)**3/(1+(curCa/KH2)**3)\n","\n","  # Return a list of the increment values\n","  return [dP0dt, dP1dt, dP2dt, dP3dt, dP4dt, dP5dt, dP6dt, dP7dt, dP8dt, dP9dt, dP10dt, depdt, dIdt]\n","\n","# Create a list of all the initial conditions.\n","y0 = [ek, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ep0, I0]\n","\n","z = 70000 # Declare the number of timesteps\n","t = np.linspace(0, max_time + 1000, z) # Create time array\n","\n","# ODE Solution Script using odeint()\n","# This function does the Euler integration that you coded on your own in previous classes and returns a solution\n","soln = odeint(model, y0, t)\n","\n","# Assigns variable names to solution matrix\n","P0 = soln[:, 0]\n","P1 = soln[:, 1]\n","P2 = soln[:, 2]\n","P3 = soln[:, 3]\n","P4 = soln[:, 4]\n","P5 = soln[:, 5]\n","P6 = soln[:, 6]\n","P7 = soln[:, 7]\n","P8 = soln[:, 8]\n","P9 = soln[:, 9]\n","P10 = soln[:, 10]\n","con_P = 1*P1 + 2*P2 + 3*P3 + 4*P4 + 5*P5 + 6*P6 + 7*P7 + 8*P8 + 9*P9 + 10*P10 \n","\n","plt.plot(t,con_P)\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fc450226f60>]"]},"metadata":{"tags":[]},"execution_count":1},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"Gflle5N0Fugo","executionInfo":{"status":"ok","timestamp":1606621802913,"user_tz":-480,"elapsed":1679,"user":{"displayName":"You Zhou","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj6F0Sz-Q-Xm5D3ogN67YRO3Tn7ZbLUoMF5ZKmT=s64","userId":"06987722824977437445"}},"outputId":"08e51c63-3249-4fe5-e051-3dab7aa316a0"},"source":["import math\n","import matplotlib.pyplot as plt\n","\n","# parameter specification\n","f = 100 # frequency of excitation: 10Hz\n","max_time = 1 # total simulation time: 60s\n","tau = 0.2 # relaxtion time of  Ca2+  decay: 0.2s\n","A = 1 # amplitude of a single  Ca2+  pulse: 1Î¼m\n","c0 = 0.1 # resting concentration of  Ca2+: 0.1Î¼m\n","\n","def wave(A, tau, start, cur):\n","    if cur < start:\n","        result = 0\n","    else:\n","        result = A*math.exp(-(cur - start)/tau)\n","    return result\n","\n","total_number_wave = max_time * f\n","start_time = []\n","for i in range(total_number_wave + 1):\n","    dt = 1/f\n","    start_time.append(round(i*dt,2))\n","    \n","sample = []\n","for i in range(220):\n","    dt = 1/(f)\n","    sample.append(round(i*dt,2) - 0.0001)\n","    sample.append(round(i*dt,2) )\n","sample.insert(0, -1)\n","\n","totalC = []\n","for c in sample:\n","    if c < 0:\n","        totalC.append(c0)\n","        continue\n","    curC = c0\n","    for s in start_time:\n","        curC = curC + wave(A, tau, s, c)\n","    totalC.append(curC)\n","\n","plt.figure(num = 6)    \n","plt.plot(sample,totalC)\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fddafec2358>]"]},"metadata":{"tags":[]},"execution_count":10},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"9S4ExplGjJHA","executionInfo":{"status":"ok","timestamp":1606877318981,"user_tz":-480,"elapsed":1623,"user":{"displayName":"You Zhou","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj6F0Sz-Q-Xm5D3ogN67YRO3Tn7ZbLUoMF5ZKmT=s64","userId":"06987722824977437445"}},"outputId":"7f617e2b-5f52-4d04-de49-4f8ca45b8a2d"},"source":["import numpy as np # import data structuring\n","from scipy.integrate import odeint # import ODE integrating function\n","import matplotlib.pyplot as plt # import plotting libraries\n","import math\n","\n","# parameter specification\n","ek = 20.0 # Total concentration of CaMKII: 0.1-30Î¼M\n","ep0 = 0.1 # Total concentration of protein phosphatase (PP1): 0.01-1.2Î¼M\n","I0 = 0.1 # Concentration of free inhibitor 1: 0.0, 0.1Î¼M\n","vCaN = 1.0 # Activity of calcineurin divided by its Michaelis constant: 1.0s-1 \n","vPKA = 1.0 # Activity of PKA divided by its Michaelis constant: 1.0s-1\n","KM = 0.4 # The Michaelis constant of protein phosphatase: 0.4-20Î¼M\n","KH1 = 1.8 # The Ca2+ activation Hill constant of CaMKII: 4.0Î¼M; tested as 1.8\n","KH2 = 0.7 # The Ca2+ activation Hill constant of calcineurin: 0.3-1.4Î¼M\n","k1 = 0.5 # The catalytic constant of autophosphorylation: 0.5s-1\n","k2 = 2.0 # The catalytic constant of protein phosphatase: 2.0s-1\n","k3 = 1.0 # The association rate constant of the PP1.I1P complex: 1.0Î¼M-1s-1\n","k4 = 1.10**-3 # The dissociation rate constant of the PP1.I1P complex: 1.10^-3s-1\n","\n","# wave parameter specification\n","f = 100 # frequency of excitation: 10Hz\n","max_time = 1 # total simulation time: 60s\n","tau = 0.2 # relaxtion time of  Ca2+  decay: 0.2s\n","A = 1 # amplitude of a single  Ca2+  pulse: 1Î¼m\n","c0 = 0.1 # resting concentration of  Ca2+: 0.1Î¼m\n","\n","total_number_wave = max_time * f\n","start_time = []\n","for i in range(total_number_wave + 1):\n","    dt = 1/f\n","    start_time.append(round(i*dt,1))\n","\n","def wave(A, tau, start, cur):\n","    if cur < start:\n","        result = 0\n","    else:\n","        result = A*math.exp(-(cur - start)/tau)\n","    return result\n","\n","# Create function to solve a set of ODEs.\n","def model(y, t):\n","  # labeling where in the model output y, you will track each species.\n","  P0 = y[0]\n","  P1 = y[1]\n","  P2 = y[2]\n","  P3 = y[3]\n","  P4 = y[4]\n","  P5 = y[5]\n","  P6 = y[6]\n","  P7 = y[7]\n","  P8 = y[8]\n","  P9 = y[9]\n","  P10 = y[10]\n","  ep = y[11]\n","  I = y[12]\n","\n","  sumiPi = 1*P1 + 2*P2 + 3*P3 + 4*P4 + 5*P5 + 6*P6 + 7*P7 + 8*P8 + 9*P9 + 10*P10 \n","\n","  curCa = c0\n","  for s in start_time:\n","    curCa = curCa + wave(A, tau, s, t) \n","    \n","  v1 = (10*k1*P0*(curCa/KH1)**8)/((1+(curCa/KH1)**4)**2)\n","  v2 = k1*(curCa/KH1)**4/(1+(curCa/KH1)**4)\n","  v3 = k2*ep/(KM + sumiPi)\n","  dP0dt = -v1 + v3*P1\n","  dP1dt = v1 - v3*P1 - v2*P1 + 2*v3*P2\n","  dP2dt = v2*P1 - 2*v3*P2 - 1.8*v2*P2 + 3*v3*P3\n","  dP3dt = 1.8*v2*P2 - 3*v3*P3 - 2.3*v2*P3 + 4*v3*P4\n","  dP4dt = 2.3*v2*P3 - 4*v3*P4 - 2.7*v2*P4 + 5*v3*P5\n","  dP5dt = 2.7*v2*P4 - 5*v3*P5 - 2.8*v2*P5 + 6*v3*P6\n","  dP6dt = 2.8*v2*P5 - 6*v3*P6 - 2.7*v2*P6 + 7*v3*P7\n","  dP7dt = 2.7*v2*P6 - 7*v3*P7 - 2.3*v2*P7 + 8*v3*P8\n","  dP8dt = 2.3*v2*P7 - 8*v3*P8 - 1.8*v2*P8 + 9*v3*P9\n","  dP9dt = 1.8*v2*P8 - 9*v3*P9 - v2*P9 + 10*v3*P10\n","  dP10dt = v2*P9 - 10*v3*P10\n","  depdt = -k3*I*ep + k4*(ep0 - ep)\n","  dIdt = -k3*I*ep + k4*(ep0 - ep) + vPKA*I0 - vCaN*I*(curCa/KH2)**3/(1+(curCa/KH2)**3)\n","\n","  # Return a list of the increment values\n","  return [dP0dt, dP1dt, dP2dt, dP3dt, dP4dt, dP5dt, dP6dt, dP7dt, dP8dt, dP9dt, dP10dt, depdt, dIdt]\n","\n","# Create a list of all the initial conditions.\n","y0 = [ek, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ep0, I0]\n","\n","z = 300 # Declare the number of timesteps\n","t = np.linspace(0, max_time + 2, z) # Create time array\n","\n","# ODE Solution Script using odeint()\n","# This function does the Euler integration that you coded on your own in previous classes and returns a solution\n","soln = odeint(model, y0, t)\n","\n","# Assigns variable names to solution matrix\n","P0 = soln[:, 0]\n","P1 = soln[:, 1]\n","P2 = soln[:, 2]\n","P3 = soln[:, 3]\n","P4 = soln[:, 4]\n","P5 = soln[:, 5]\n","P6 = soln[:, 6]\n","P7 = soln[:, 7]\n","P8 = soln[:, 8]\n","P9 = soln[:, 9]\n","P10 = soln[:, 10]\n","con_P = 1*P1 + 2*P2 + 3*P3 + 4*P4 + 5*P5 + 6*P6 + 7*P7 + 8*P8 + 9*P9 + 10*P10 \n","\n","plt.plot(t,con_P)\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fc44fd2ac88>]"]},"metadata":{"tags":[]},"execution_count":2},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"JlB0mftF_PZ5"},"source":["## References\n","[1]\tBliss, T. V., & Collingridge, G. L. (1993). A synaptic model of memory: long-term potentiation in the hippocampus. Nature, 361(6407), 31-39.\n","\n","[2]\tYan-You Huang, P. V., Nguyen, T. A., & Kandel, E. R. (1996). Long-lasting forms of synaptic potentiation in the mammalian hippocampus. Learning & Memory.\n","\n","[3]\tMalenka, R. C., & Nicoll, R. A. (1999). Long-term potentiation--a decade of progress?. Science, 285(5435), 1870-1874.\n","\n","[4]\tGiese, K. P., Fedorov, N. B., Filipkowski, R. K., & Silva, A. J. (1998). Autophosphorylation at Thr286 of the Î± calcium-calmodulin kinase II in LTP and learning. Science, 279(5352), 870-873.\n","\n","[5]\tKennedy, M. B. (1998). Signal transduction molecules at the glutamatergic postsynaptic membrane. Brain research reviews, 26(2-3), 243-257.\n","\n","[6]\tLisman, J. (1994). The CaM kinase II hypothesis for the storage of synaptic memory. Trends in neurosciences, 17(10), 406-412.\n","\n","[7]\tLisman, J., Malenka, R. C., Nicoll, R. A., & Malinow, R. (1997). Learning mechanisms: the case for CaM-KII. Science, 276(5321), 2001-2002.\n","\n","[8] Hanson, P. I., & Schulman, H. (1992). Neuronal Ca2+/calmodulin-dependent protein kinases. Annual review of biochemistry, 61(1), 559-601.\n","\n","[9] Strack, S., Choi, S., Lovinger, D. M., & Colbran, R. J. (1997). Translocation of autophosphorylated calcium/calmodulin-dependent protein kinase II to the postsynaptic density. Journal of Biological Chemistry, 272(21), 13467-13470.\n","\n","[10] Ishida, A., Kameshita, I., & Fujisawa, H. (1998). A novel protein phosphatase that dephosphorylates and regulates Ca2+/calmodulin-dependent protein kinase II. Journal of Biological Chemistry, 273(4), 1904-1910.\n","\n","[11] Mulkey, R. M., Endo, S., Shenolikar, S., & Malenka, R. C. (1994). Involvement of a calcineurin/inhibitor-1 phosphatase cascade in hippocampal long-term depression. Nature, 369(6480), 486-488.\n","\n","[12] Stemmer, P. M., & Klee, C. B. (1994). Dual calcium ion regulation of calcineurin by calmodulin and calcineurin B. Biochemistry, 33(22), 6859-6866.\n","\n","[13] Endo, S., Zhou, X., Connor, J., Wang, B., & Shenolikar, S. (1996). Multiple structural elements define the specificity of recombinant human inhibitor-1 as a protein phosphatase-1 inhibitor. Biochemistry, 35(16), 5220-5228.\n","\n","[14 ]Helmchen, F., Imoto, K., & Sakmann, B. (1996). Ca2+ buffering and action potential-evoked Ca2+ signaling in dendrites of pyramidal neurons. Biophysical journal, 70(2), 1069-1081.\n"]}]}